import 'dart:async';
import 'dart:ui';

import 'package:trezi_crm/api/ApiManager.dart';
import 'package:trezi_crm/model/CRMData.dart';
import 'package:trezi_crm/model/MarkerLead.dart';
import 'package:trezi_crm/model/map_style.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:trezi_crm/screens/LeadDetailsScreen.dart';

import 'package:url_launcher/url_launcher.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class FindFriends extends StatefulWidget {
  const FindFriends({ Key? key }) : super(key: key);

  @override
  _FindFriendsState createState() => _FindFriendsState();
}

class _FindFriendsState extends State<FindFriends> {
  static final CameraPosition _kGooglePlex = CameraPosition(
    target: LatLng(28.527330, 77.354790),
    zoom: 14.4746,
  );

  Set<Marker> _markers = {};
  late GoogleMapController _controller;

  // List<dynamic> _contacts = [];

  List<dynamic> _contacts = [
    {
      "name": "Me",
      "position": LatLng(28.527330, 77.354790),
      "marker": 'assets/markers/marker-1.png',
      "image": 'assets/images/avatar-1.png',
    },
    {
      "name": "Samantha",
      "position": LatLng(28.552690, 77.339316),
      "marker": 'assets/markers/marker-2.png',
      "image": 'assets/images/avatar-2.png',
    },
    {
      "name": "Malte",
      "position": LatLng(28.541381, 77.375665),
      "marker": 'assets/markers/marker-3.png',
      "image": 'assets/images/avatar-3.png',
    },
    {
      "name": "Julia",
      "position": LatLng(28.540325, 77.355967),
      "marker": 'assets/markers/marker-4.png',
      "image": 'assets/images/avatar-4.png',
    },
    {
      "name": "Tim",
      "position": LatLng(28.522878, 77.389125),
      "marker": 'assets/markers/marker-5.png',
      "image": 'assets/images/avatar-5.png',
    },
    {
      "name": "Sara",
      "position": LatLng(28.532822, 77.409696),
      "marker": 'assets/markers/marker-6.png',
      "image": 'assets/images/avatar-6.png',
    },
    {
      "name": "Ronaldo",
      "position": LatLng(28.624514, 77.370041),
      "marker": 'assets/markers/marker-7.png',
      "image": 'assets/images/avatar-7.png',
    },
  ];


  @override
  void initState() {
    super.initState();

    //_fetchContacts();

    createMarkers(context);

  }

  late Future<CRMData> futureCRMData;
  late List<UserData> usersData;

  void _fetchContacts() async {
    futureCRMData = ApiManager.fetchCRMData();

    futureCRMData.then((data) {
      setState(() {
        usersData = data.data;
        _contacts = usersData.map((user) {
          return MarkerLead(
            name: user.firstName,
            position: LatLng(
                getLatitude(user.city) as double,
                getLongitude(user.city) as double,
            ),
            marker: 'assets/markers/marker-1.png',
            image: 'assets/images/avatar-1.png',
          );
        }).toList();

        print('LIST ${_contacts}');
      });
    }).catchError((error) {
      print('Error: $error');
    });
  }

  Future<double>  getLatitude (String city) async {
    //final city = 'New Delhi';

    print('city: ${city}');

    final location = await getLatLongForCity(city);

    print('location: ${location}');

    double latitude = 0.0;
    if (location != null) {
      latitude = location['latitude']!;
      print('Latitude: ${location['latitude']}');
      print('Longitude: ${location['longitude']}');

      return latitude;
    } else {
      print('Failed to get location for $city');
    }
    return latitude;
  }

  Future<double> getLongitude (String city) async {
    //final city = 'New Delhi';

    print('city: ${city}');

    final location = await getLatLongForCity(city);

    print('location: ${location}');

    double longitude = 0.0;
    if (location != null) {
      longitude = location['longitude']!;
      print('Latitude: ${location['latitude']}');
      print('Longitude: ${location['longitude']}');

      return longitude;
    } else {
      print('Failed to get location for $city');
    }
    return longitude;
  }

  Future<Map<String, double>?> getLatLongForCity(String cityName) async {
    final String url = 'https://nominatim.openstreetmap.org/search?q=${Uri.encodeComponent(cityName)}&format=json';

    try {
      final response = await http.get(Uri.parse(url));

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);

        if (data.isNotEmpty) {
          final lat = double.parse(data[0]['lat']);
          final lng = double.parse(data[0]['lon']);

          return {'latitude': lat, 'longitude': lng};
        }
      }
    } catch (e) {
      print('Error: $e');
    }

    return null;
  }

  @override
  Widget build(BuildContext context) {
    createMarkers(context);

    return Scaffold(
      body:
      // Stack(
      //   children: [
          GoogleMap(
            initialCameraPosition: _kGooglePlex,
            markers: _markers,
            myLocationButtonEnabled: false,
            scrollGesturesEnabled: true,
            zoomGesturesEnabled: true,
            tiltGesturesEnabled: false,
            rotateGesturesEnabled: true,

            onMapCreated: (GoogleMapController controller) {
              _controller = controller;
              controller.setMapStyle(MapStyle().aubergine);
            },
            onCameraMove: (CameraPosition position) {
              print("Camera moved to: ${position.target}");
            },
          ),

/*
          Positioned(
            bottom: 50,
            left: 20,
            right: 60,
            child: Container(
              width: MediaQuery.of(context).size.width,
              height: 100,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20)
              ),
              child:
              ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: _contacts.length, 
                itemBuilder: (context, index) {
                  return GestureDetector(
                    onTap: () {
                      _controller.moveCamera(CameraUpdate.newLatLng(_contacts[index]["position"]));
                    },
                    child: Container(
                      width: 100,
                      height: 100,
                      margin: EdgeInsets.only(right: 10),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Image.asset(_contacts[index]['image'], width: 60,),
                          SizedBox(height: 5,),
                          Text(_contacts[index]["name"], style: TextStyle(color: Colors.black, fontWeight: FontWeight.w600),)
                        ],
                      ),
                    ),
                  );
                },
              )
            ),
          )
*/
        // ],
      // )
    );
  }

  /*createMarkers(BuildContext context) {
    Marker marker;

    _contacts.forEach((contact) async {
      marker = Marker(
        markerId: MarkerId(contact['name']),
        position: contact['position'],
        icon: await _getAssetIcon(context, contact['marker']).then((value) => value),
        // infoWindow: InfoWindow(
        //   title: contact['name'],
        //   snippet: 'Street 6 . Somewhere on the earth',
        // ),

        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => LeadDetailsScreen(leadID: 'p.dadsdsly@zylker.com',),
            ),
          );
        },

      );

      setState(() {
        _markers.add(marker);
      });
    });
  }
*/

  createMarkers(BuildContext context) {
    Marker marker;

    _contacts.forEach((contact) async {
      marker = Marker(
        markerId: MarkerId(contact['name']),
        position: contact['position'],
        icon: await _getAssetIcon(context, contact['marker']).then((value) => value),

        // infoWindow: InfoWindow(
        //   title: contact['name'],
        //   snippet: 'Street 6 . Somewhere on the earth',
        // ),

        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => LeadDetailsScreen(leadID: 'p.dadsdsly@zylker.com',),
            ),
          );
        },

      );

      setState(() {
        _markers.add(marker);
      });
    });
  }

  Future<BitmapDescriptor> _getAssetIcon(BuildContext context, String icon) async {
    final Completer<BitmapDescriptor> bitmapIcon = Completer<BitmapDescriptor>();
    final ImageConfiguration config = createLocalImageConfiguration(context, size: Size(5, 5));

    AssetImage(icon)
      .resolve(config)
      .addListener(ImageStreamListener((ImageInfo image, bool sync) async {
        final ByteData? bytes = await image.image.toByteData(format: ImageByteFormat.png);
        final BitmapDescriptor bitmap = BitmapDescriptor.fromBytes(bytes!.buffer.asUint8List());
        bitmapIcon.complete(bitmap);
      })
    );

    return await bitmapIcon.future;
  }


}

















Hello App Review Team,

Thank you for your feedback regarding our app’s compliance with the guidelines.

I would like to clarify that our app does not use the in-app purchase (IAP) mechanism for digital content, services, or subscriptions. Instead, we handle transactions through external payment methods. Here’s a brief overview of our approach:

External Payments: All digital content, services, or subscriptions are purchased outside of the app via our website or other external platforms. This approach is intentionally designed based on our business model and user experience strategy.

Access to Digital Content: Users who purchase digital content or subscriptions through our external platform can access it within the app using their login credentials. We do not offer any purchase or subscription options directly within the app.

Compliance with App Store Guidelines: We acknowledge that this approach does not align with Guideline 3.1.1, which requires digital content and services to be purchasable through IAP if accessed within the app. We understand the importance of this guideline and are currently reviewing our options to comply with it.

To move forward, we are considering the following steps:

Implementing in-app purchase options for any digital content or subscriptions that users can access through the app.

Updating our app’s functionality to ensure compliance with all relevant guidelines.
Please let us know if there are specific recommendations or additional information that we should consider as we work towards compliance. We appreciate your guidance on how best to proceed in this situation.

Thank you for your assistance.

Best regards,